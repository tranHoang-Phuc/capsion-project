version: "3.9"

services:
  nginx:
    container_name: nginx
    image:  nginx:1.27.2
    restart: unless-stopped
    volumes:
      - ./nginx/templates:/etc/nginx/templates
      - ./nginx/configuration/custom_proxy_settings.conf:/etc/nginx/conf.d/custom_proxy_settings.conf
    ports:
      - "80:80"
    networks:
      - sep-network

  identity:
    container_name: identity
    image: quay.io/keycloak/keycloak:26.0.2
    command: 'start-dev --features=scripts --import-realm'
    environment:
      KC_FEATURES: scripts
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: admin
      KC_DB_PASSWORD: admin
      KC_HTTP_PORT: 80
    volumes:
      - ./identity/realm-export.json:/opt/keycloak/data/import/realm-export.json
      - ./identity/themes/sep/theme:/opt/keycloak/themes
    networks:
      - sep-network

  postgres:
    container_name: postgres
    build:
      context: ./docker/postgres
      dockerfile: Dockerfile
    hostname: postgres
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - ./docker/postgres/postgresql.conf.sample:/usr/share/postgresql/postgresql.conf.sample
      - ./postgres_init.sql:/docker-entrypoint-initdb.d/postgres_init.sql
      - postgres:/var/lib/postgresql/data
    command: postgres -c 'config_file=/usr/share/postgresql/postgresql.conf.sample' -c 'max_connections=500'
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_HOST_AUTH_METHOD: trust
    networks:
      - sep-network

  registry:
    container_name: registry-service
    build:
      context: ./registry-service
      dockerfile: Dockerfile
    hostname: eureka-server
    ports:
      - "8761:8761"
    networks:
      - sep-network
    depends_on:
      - identity
      - postgres

  zookeeper:
    image: debezium/zookeeper:2.7.3.Final
    restart: always
    ports:
      - 2181:2181
      - 2888:2888
      - 3888:3888
    networks:
      - sep-network

  kafka:
    image: confluentinc/cp-kafka:7.7.1
    hostname: ${KAFKA_SERVICE_HOST}
    depends_on:
      - zookeeper
    ports:
      - ${KAFKA_SERVICE_PORT}:${KAFKA_SERVICE_PORT}
      - 29092:29092
    environment:
      - KAFKA_BROKER_ID
      - KAFKA_ZOOKEEPER_CONNECT
      - KAFKA_ADVERTISED_LISTENERS
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
      - KAFKA_INTER_BROKER_LISTENER_NAME
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
    networks:
      - sep-network
   
  kafka-connect:
    image: debezium/connect:2.7.3.Final
    restart: always
    ports:
      - 8083:8083
      - 5005:5005
    depends_on:
      - kafka
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=kafka_connect_configs
      - OFFSET_STORAGE_TOPIC=kafka_connect_offsets
    networks:
      - sep-network
    
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    ports:
      - 8089:8080
    depends_on:
      - kafka
      - kafka-connect
    networks:
      - sep-network

  redis:
    image: redis:7.4.1-alpine
    restart: always
    ports:
      - '6379:6379'
    environment:
      - SPRING_DATA_REDIS_HOST=${SPRING_DATA_REDIS_HOST:-redis}
      - SPRING_DATA_REDIS_PORT=${SPRING_DATA_REDIS_PORT:-6379}
    volumes:
      - redis:/data
    networks:
      - sep-network

volumes:
  postgres:
    driver: local
  redis:
    driver: local

networks:
  sep-network:
    driver: bridge